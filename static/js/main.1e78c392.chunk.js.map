{"version":3,"sources":["recipe.module.css","recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","Recipe","_ref","title","ingredients","calories","image","react_default","a","createElement","className","style","map","ingredient","text","parseInt","src","App","_useState","useState","_useState2","Object","slicedToArray","search","setSearch","_useState3","_useState4","setRecipe","_useState5","_useState6","query","setQuery","useEffect","getRequest","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","console","log","stop","apply","this","arguments","onSubmit","e","preventDefault","placeholder","type","onChange","target","value","src_recipe","key","Math","random","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,OAAA,0OCiBHC,EAfA,SAAAC,GAA2C,IAAzCC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,YAAaC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,MAC3C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,QAClBO,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,UACKL,EAAYQ,IAAI,SAAAC,GAAU,OACvBN,EAAAC,EAAAC,cAAA,UAAKI,EAAWC,SAGxBP,EAAAC,EAAAC,cAAA,sBAAcM,SAASV,IACvBE,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,MCoDPW,EA7DH,WAEV,IAFgBC,EAKYC,mBAAS,IALrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKTK,EALSH,EAAA,GAKDI,EALCJ,EAAA,GAAAK,EAMYN,mBAAS,IANrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMTzB,EANS0B,EAAA,GAMDC,EANCD,EAAA,GAAAE,EAOUT,mBAAS,WAPnBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAOTE,EAPSD,EAAA,GAOFE,EAPEF,EAAA,GAShBG,oBAAU,WACRC,KACC,CAACH,IAEJ,IAAMG,EAAU,eAAA/B,EAAAmB,OAAAa,EAAA,EAAAb,CAAAc,EAAA3B,EAAA4B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA3B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OAAoCf,EAApC,YAAAe,OAZf,WAYe,aAAAA,OAXd,qCAUG,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAEEL,EAASS,OAFX,OAEXR,EAFWE,EAAAK,KAGjBnB,EAAUY,EAAKS,MACfC,QAAQC,IAAIX,EAAKS,MAJA,wBAAAP,EAAAU,SAAAd,MAAH,yBAAAnC,EAAAkD,MAAAC,KAAAC,YAAA,GAiBhB,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAc6C,SARlB,SAAAC,GACdA,EAAEC,iBACF1B,EAASR,GACTC,EAAU,MAMNjB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACjBgD,YAAY,4BACZC,KAAK,OACLC,SAhBY,SAAAJ,GAChBhC,EAAUgC,EAAEK,OAAOC,QAgBfA,MAAOvC,IAGPhB,EAAAC,EAAAC,cAAA,UACAC,UAAU,gBACViD,KAAK,UAFL,YAKC3D,EAAOY,IAAI,SAAAZ,GAAM,OAChBO,EAAAC,EAAAC,cAACsD,EAAD,CACEC,IAAKC,KAAKC,SAAW,EACrB/D,MAAOH,EAAOA,OAAOmE,MACrB/D,YAAaJ,EAAOA,OAAOI,YAC3BC,SAAUL,EAAOA,OAAOK,SACxBC,MAAON,EAAOA,OAAOM,YC3Cb8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e78c392.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\"};","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe = ({title, ingredients, calories, image}) => {\n    return(\n        <div className={style.recipe}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            <p>Calories: {parseInt(calories)}</p>\n            <img src={image}></img>\n        </div>\n    )\n}\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './recipe'\n\nconst App = () => {\n  \n  const APP_ID = 'ad6266a8';\n  const APP_KEY = '2ea3582044f0849260b0ba1c8ef5b0ae';\n\n  const [search, setSearch] = useState('');\n  const [recipe, setRecipe] = useState([]);\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    getRequest()\n  }, [query])\n\n  const getRequest = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipe(data.hits);\n    console.log(data.hits);\n  }\n\n  const getSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getFull = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getFull}>\n        <input className=\"search-input\" \n        placeholder=\"Recipes: search food here\" \n        type=\"text\"\n        onChange={getSearch}\n        value={search}\n        >\n        </input>\n        <button \n        className=\"search-button\" \n        type=\"submit\"\n        >submit!</button>\n      </form>\n        {recipe.map(recipe => (\n          <Recipe \n            key={Math.random() + 1}\n            title={recipe.recipe.label}\n            ingredients={recipe.recipe.ingredients}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n          />\n        ))}\n      \n    </div>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}